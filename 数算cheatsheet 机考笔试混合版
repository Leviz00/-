## $$cheatsheet 机考+笔试混合版$$

### $逻辑结构$

数据的逻辑结构是指数据元素之间的逻辑关系和组织方式，它独立于数据的具体存储方式。数据的逻辑结构可以分为以下几种主要类型：

1. **集合结构 **
   - **定义**：集合结构是最简单的逻辑结构，数据元素之间没有特定的顺序和关系，只是简单地归为一组。
   - **特点**：数据元素无序且互不关联。
2. **线性结构**
   - **定义**：有且仅有一个开始节点和一个终端节点，并且除了头尾，每个数据元素都有一个直接前驱和直接后继，是1对1的关系
   - **特点**：数据元素之间存在一对一的顺序关系
   - **常见的线性结构**有：线性表、栈、队列、串（注意：这四种都是逻辑结构）
3. **非线性结构**
   - **定义**：一个节点可能有多个直接前驱和后继
   - **特点**：数据元素之间存在一对多的层次关系。
   - **常见的非线性结构有**：树、图



### $存储结构$

存储结构是指数据在计算机存储设备（如内存、磁盘等）中的实际组织和排列方式。

值得一提的是：存储密度$= ($结点数据本身所占的存储量$)/($结点结构所占的存储总量$)$，显而易见，链表储存密度＜1

根据数据元素在存储设备中的排列方式，存储结构主要可以分为以下几种类型：

1. **顺序存储结构 **
   - 在顺序存储结构中，数据元素按线性顺序存储在连续的内存空间中。这种结构的特点是可以通过元素的序号（索引）直接访问元素，访问效率高。
   - **优点**：
     - 访问效率高，可以通过索引直接访问元素，时间复杂度为 \(O(1)\)。
     - 内存空间紧凑，不存在指针存储开销。
   - **缺点**：
     - 插入和删除操作效率较低，尤其是在中间位置进行插入和删除时，可能需要移动大量元素，时间复杂度高。
     - 需要预先分配连续的内存空间，可能导致内存浪费或分配失败。
   - **例子**：
     - 顺序表
     - 基于数组实现的队列 (Queue) 和栈 (Stack)
2. **链式存储结构 **
   - 在链式存储结构中，数据元素存储在不连续的内存空间中，每个元素通过指针或引用链接在一起。链式存储结构的插入和删除操作是通过修改指针进行的。
   - **优点**：
     - 插入和删除操作效率高，时间复杂度为 \(O(1)\)，只需修改指针指向。
     - 不需要预先分配大块连续的内存空间。
   - **缺点**：
     - 访问效率低，必须通过指针逐个遍历元素，时间复杂度为 \(O(n)\)。
     - 需要额外的存储空间存储指针，增加了存储开销。
   - **例子**：
     - 单链表 (Singly Linked List)
     - 双链表 (Doubly Linked List)
     - 循环链表 (Circular Linked List)
3. **索引存储结构**
   - 在索引存储结构中，为了加快查找速度，在数据元素之外建立索引表，通过索引表来快速定位数据元素。索引存储结构常用于大规模数据的查找操作。
   - **优点**：
     - 查找效率高，可以快速定位数据元素。
   - **缺点**：
     - 需要额外的存储空间存储索引表。
     - 插入和删除操作较复杂，需要维护索引表。
   - **例子**：
     - 数据库索引 (B树、B+树)
     - 倒排表
4. **散列存储结构 **
   - 在散列存储结构中，通过散列函数将数据元素的关键字映射到存储地址，实现快速查找和存储。
   - **优点**：
     - 查找、插入和删除操作效率高，时间复杂度为 \(O(1)\)（平均情况下）。
   - **缺点**：
     - 需要设计良好的散列函数以减少冲突。
     - 处理冲突的方法（如开放地址法、链地址法）可能影响性能。
   - **例子**：
     - 哈希表 (Hash Table)
   - 歪楼：**处理冲突**
   - 开放地址法：线性探测法、二次探测法、随机探测法
   - **链地址法**：将所有关键字为同义词的记录存储在一个单链表中，在散列表中只存储所有同义词子表的头指针
     - 拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此**平均查找长度较短**
     - 由于拉链法中各链表上的结点空间是动态申请的，故它更**适合于造表前无法确定表长**的情况
     - 开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间
     - 在用拉链法构造的散列表中，**删除结点的操作易于实现**。只要简单地删去链表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结点的空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放地址法中，空地址单元（即开放地址）都是查找失败的条件。因此在用开放地址法处理冲突的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点
     - 拉链法的**缺点**：指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度



### $题目中遇到的点$

一个逻辑结构可以有多种类型的存储结构，且不同类型的存储结构会直接影响到数据处理的效率

基于顺序表实现的逻辑结构也不一定是线性结构，比如堆

两种基本类型的索引：

- 顺序索引：基于值的顺序排序
- 散列索引：基于将值平均分道若干散列桶中。一个值所属的散列桶是由散列函数（hash function）决定的。

数据的最小单位：数据项

数据的基本单位：数据元素

数据结构：带有结构的各数据元素的集合



### $线性表$

线性表（$List$）的定义：零个或多个数据元素的**有限**序列。

​	线性表的数据集合为$\{a_1,a_2……a_n\}$，该序列有唯一的头元素和尾元素，除了头元素外，每个元素都有唯一的前驱元素，除了尾元素外，每个元素都有唯一的后继元素。

​	线性表中的元素属于相同的数据类型，即每个元素所占的空间相同。

​	注意：$Python$中的$List$存储的是引用，所以尽管数据类型多样，$List$中数据类型仍相同

框架：
$$
线性表\begin{cases}
顺序存储——顺序表\\
链式存储\begin{cases}
单链表\\
双链表\\
循环链表\end{cases}
\end{cases}
$$
有关时间复杂度：

生成、求表中元素个数、表尾添加/删除元素、返回/修改对应下标元素，均为$O(1)$；

而查找、删除、插入元素，均为$O(n)$。



### $链表$

##### 1、单链表

​	在链式结构中，除了要存储数据元素的信息外，还要存储它的后继元素的存储地址。存储数据元素信息的域称为数据域，存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。

​	链表中第一个结点的存储位置叫做头指针。有时为了方便对对链表进行操作，会在单链表的第一个结点前附设一个节点，称为头结点，此时头指针指向的结点就是头结点。

![image-20240616160011368](https://raw.githubusercontent.com/heiheiha798/spring-cs201-yangtianjian/main/img/image-20240616160011368.png)

​	空链表，头结点的直接后继为空。

![在这里插入图片描述](https://raw.githubusercontent.com/heiheiha798/spring-cs201-yangtianjian/main/img/20210207165435359.png)

##### 2、双链表

​	双向链表$$(Double$$ $$Linked$$ $$List)$$是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。

##### 3、循环链表

​	将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。



### $堆$

实现方式：按完全二叉树的顺序存储方式把元素存储在一个一维数组中，满足根节点值大于（小于）所有子节点值

初始化：对分支节点从下往上依次向下冒泡调整，时间复杂度为$O(n)$

插入：将元素插入最后一位，再进行向上冒泡，时间复杂度为$O(logn)$

删除：删除堆的根节点，将最后一个节点补到根节点位置，再对根节点进行向下冒泡，时间复杂度为$O(logn)$



### $循环队列$

用长度为$n$的数组实现，认为rear指向末端元素下一个空位（新元素插入位置）时：

队空条件为：$rear==front$

队列长度为：$length=(rear-front+n)\%n$

队满：$(rear-front+1)\%n==0$

歪楼：用链接方式存储的队列，在进行删除运算时头、尾指针可能都要修改



### $排序$

$$
\begin{array}{|c|c|c|c|c|c|c|p{6cm}|}
\hline 
	名称 & 最佳 & 平均 & 最差 & 内存 & 稳定性 & 方法 & 其他备注 \\
\hline
	冒泡排序 & n & n^2 & n^2 & 1 & 是 & 交换 & 代码量极小 \\
\hline
	选择排序 & n^2 & n^2 & n^2 & 1 & 否 & 选择 & 当使用链表代替交换时，稳定,多了O(n)额外空间 \\
\hline
	快速排序 & nlogn & nlogn & n^2 & logn& 否 & 分区 & 通常原地进行，栈空间为O(logn) \\
\hline
	归并排序 & nlogn & nlogn & nlogn & n & 是 & 归并 & 高度可并行化(可优化至O(log n))\\
\hline
	插入排序 & n & n^2 & n^2 & 1 & 是 & 插入 & 最坏有d个逆序对，时间复杂度为O(n + d) \\
\hline
	希尔排序 & nlogn & n^{4/3}& n^{3/2}& 1 & 否 & 插入 & 代码量小 \\
\hline
	堆排序 & nlogn & nlogn & nlogn & 1 & 否 & 选择 & \\
\hline
\end{array}
$$

#### $1.冒泡排序(Bubble\ Sort)$

​	时间复杂度：$O(n^2)$；空间复杂度：$O(1)$​​。

​	原地排序，无需额外空间，稳定



#### $2.选择排序(Selection\ Sort)$

​	工作原理：从列表的未排序部分反复选择最小(或最大)元素，并将其移动到列表的已排序部分

​	时间复杂度：$O(n^2)$；空间复杂度：$O(1)$。

​	原地排序，无需额外空间，不稳定

简单选择排序每轮找到最值，然后交换

直接选择排序每遇到更大（小）值就交换



#### $3.快速排序(Quick\ Sort)$

##### $Hoare版$：

第一步，取某元素（通常第一个元素）为基准值，我们的目的是使基准值左边的数都比基准值小，基准值右边的数都比基准值大

第二步，定义两个下标变量，一个变量从右往左走（$R$），一个变量左往右走（$L$）。$R$和$L$交替向中间移动，每次得到一对$R、L$值进行一次交换，重复移动直到$R$和$L$相遇

##### $挖坑法$：

第一步，取某元素（通常第一个元素）为基准值，将索引设置为坑

第二步，定义两个下标变量，一个变量从右往左走（$R$），一个变量左往右走（$L$）。$R$和$L$交替向中间移动，每次交换都将变量对应的值填入坑中，并将变量设置为新坑，重复直到$R$和$L$相遇

​	时间复杂度：最好时为$O(nlogn)$，最差时为$O(n^2)$

​	空间复杂度：快排在原数组上操作，额外开栈$O(logn)$

​	不稳定



#### $4.归并排序(Merge\ Sort)$

​	原理：将数组划分为更小的子数组，对每个子数组进行排序，然后将排序后的子数组合并在一起，形成最终的排序数组

​	时间复杂度：$O(nlogn)$；空间复杂度：$O(n)$​

​	可并行化算法，稳定，适合大数据集，需要额外空间



#### $5.插入排序(Insertion\ Sort)$

​	原理：对已排好序的数组从后往前搜索得到目标插入元素的插入位置，从而不断排序

​	时间复杂度：$O(n^2)$；空间复杂度：$O(1)$

​	稳定，原地排序



#### $6.希尔排序(Shell\ Sort)$

​	希尔排序可以看作是插入排序的变种，也就相当于可以交换远项

​	时间复杂度：（最差）$O(n^2)$；空间复杂度：$O(1)$​。

​	不稳定



#### $7.堆排序(Heap\ Sort)$

​	原理：将待排序的元素构建成一个堆，然后利用堆的性质来实现排序

​	时间复杂度：$O(nlogn)$；空间复杂度：$O(1)$​​

​	适合处理大型数据集，原地排序，不稳定



### $二叉树的性质$

$$
高度+1 =深度
$$

1）第$i$层最个多$2^i$个结点（层数从0开始）
2）高为$h$的二叉树结点总数最多$2^{h+1}-1$
3）结点数为$n$的树，边的数目为$n-1$
4）$n$个结点的非空二叉树至少有$$\lceil log_2(n+1) \rceil$$层结点，即高度至少为 $\lceil log_2(n+1) \rceil - 1$
5）在任意一棵二叉树中，若叶子结点（度为0）的个数为$n_0$，度为2的结点个数为$n_2$，则
$$
\begin{eqnarray}
	n_0+n_1+n_2-1&=&边数\\
	n_1+2\ n_2&=&边数\\
	\Rightarrow n_2&=&n_0-1
\end{eqnarray}
$$
6）非空满二叉树叶结点数目等于分支结点数目加1。

>   ​	在满二叉树中，我们把有子节点的节点称为分支节点。每个分支节点都会产生两个新的叶节点。  
>   ​	但是，当我们添加一个新的分支节点时，原来的一个叶节点会变成分支节点。所以，实际上只增加了一个叶节点。 

​		a）**完全二叉树**中度为1的结点数目为0个或1个

​				结合$n_2=n_0-1$可以得到$\Rightarrow$有$n$个结点的完全二叉树有$\lfloor (n+1)/2 \rfloor$个叶结点

​		c）有$n$个叶结点的完全二叉树有$2n$或$2n-1$个结点（两种都可以构建）

​		d）有$n$个结点的非空完全二叉树的高度为$\lceil log_2(n+1)\rceil - 1$      （层数为$\lceil log_2(n+1)\rceil $）

对一个度为$2$的森林 ，叶子结点总数为$L$，度数为$2$结点总个数为$N$，那么树的个数为$L-N$



### $树的储存$

树的储存形式：双亲表示法、孩子链表表示法、孩子兄弟表示法

树的储存结构：顺序储存、链式储存



### $BST增删查改$

删：将删除的节点的值替换为左子树最大值或右子树最小值

增：递归搜索，新增的节点一定是叶子节点



### $Huffman算法$

<img src="https://raw.githubusercontent.com/GMyhf/img/main/img/image-20240309111247017.png" alt="image-20240309111247017" style="zoom: 50%;" />

真正存储的数据都在叶子结点

建树：使用$heapq$重复合并权值最小的两个节点（或子树），直到所有节点都合并为一棵树为止

带权外部路径长度：叶节点数值×节点深度（从0开始）



### $图的一些基本知识$

完全图（简单完全图）：任意两个顶点之间都有边
连通图（一般指无向图）：图中任意两顶点连通
连通分量：无向图的极大连通子图（类似全集的概念）
极小连通分量：在保持连通的情况下使边数最少的子图（暗指无向图）
强连通图（特指有向图）：任意一对顶点都是强连通的
强连通分量：有向图中的极大强连通子图
生成树：包含图中全部顶点的一个极小连通子图

强连通分支：局部极大强连通子图，一个图中可能不止一个强连通分支

有向图$D=(V,E)$的每个点位于且仅位于$D$的某个强连通分支中。这就是说，所有强连通分支包含所有顶点

对任意一个连通的、无环的无向图，从图中移除任何一条边得到的图均不连通。



### $邻接表\&邻接矩阵\&相邻矩阵\&路径矩阵$

**邻接表**与邻接入边表（或称逆邻接表）：

<img src="https://raw.githubusercontent.com/heiheiha798/spring-cs201-yangtianjian/main/img/image-20240616143750986.png" alt="image-20240616143750986" style="zoom:60%;" />

**邻接矩阵**：$n\times n$二维数组
$$
\begin{vmatrix} 
	0 & 7 & \infty & 4 & 2 \\ 
	7 & 0 & 9 & 1 & 5 \\ 
	\infty & 9 & 0 & 3 & \infty \\ 
	4 & 1 & 3 & 0 & 10 \\ 
	2 & 5 & \infty & 10 & 0 \\ 
\end{vmatrix}
$$
**相邻矩阵 $(A)$**：是一个 $n \times n$ 的矩阵，$A_{ij}$ 的值为1表示 $i$ 和 $j$ 节点之间有边，0表示没有边

**路径矩阵**：相邻矩阵的$m$次幂$ A^m $的 $i$ 行 $j$ 列的值表示 $i$ 和 $j$ 节点之间的路径的数量。如果该元素不为零，说明存在长度为$m$的路径。



### $拓扑排序$

一般对有向无环图使用，当然也可以用来判断环的存在

每次选择入度为$0$的节点入栈，相应邻接表中元素入度全部$-1$，重复直到全部节点入栈，最后输出栈中元素

AOV（Active On Vertex）网络：在有向图中，用顶点表示活动，用有向边表示前驱是后驱必要活动条件

例：

| 活动 | V0     | V1   | V2   | V3     | V4   | V5     | V6   | V7     |
| ---- | ------ | ---- | ---- | ------ | ---- | ------ | ---- | ------ |
| 前驱 | 无前驱 | V0   | V0   | V0, V2 | V1   | V2, V4 | V3   | V5, V6 |

对应AOV网络

```mermaid
graph LR
    v0 --> V1; v0 --> v2; v0 --> v3
    V1 --> v4
    v2 --> v3; v2 --> v5
    v3 --> v6
    v4 --> v5
    v5 --> v7
    v6 --> v7
```



拓扑排序（其中字典序的一种）：$V0,V1,V2,V3,V4,V5,V6,V7$



### $拉普拉斯矩阵$

度数矩阵是一个对角矩阵 ，其中包含的信息为的每一个顶点的度数

将度数矩阵与邻接矩阵逐位相减，可以求得图的拉普拉斯矩阵

![img](https://raw.githubusercontent.com/heiheiha798/spring-cs201-yangtianjian/main/img/1575881364.jpg)



### $Dijkstra$

带权BFS，用以求解图中特定两点间最短距离

Dijkstra算法的核心思想是贪心算法。从起始节点开始，逐步扩展到达图中所有其他节点的最短路径。算法维护两组节点集合：已经找到最短路径的节点集合和还没有找到最短路径的节点集合。初始时，起始节点的最短路径值设为0，其他所有节点的最短路径值设为无穷大。算法重复以下步骤直到所有节点的最短路径都被找到：

1. 从还没有找到最短路径的节点集合中选择一个与起始节点最短距离最小的节点。
2. 更新该节点相邻的节点的最短路径值：如果通过该节点到达相邻节点的路径比当前记录的路径更短，就更新这个最短路径值。
3. 将该节点移动到已经找到最短路径的节点集合中。
4. 重复上述步骤，直到所有节点的最短路径都被找到。

对负权边失效$\Rightarrow$贪心策略不再适用（$Prim$算法可以负权）



### $最小生成树$

在一给定的**无向图**$\ G = (V, E)$ 中，$(u, v)$ 代表连接顶点$u $与顶点$ v $的边，而$ w(u, v) $代表此的边权重，若存在$ T $为$ E $的子集（即）且为无循环图，使得$ w(T) $最小，则此$ T $为$ G $的最小生成树。最小生成树其实是最小权重生成树的简称。

$Prim$算法&$Kruskal$算法：

- **Prim 算法（适合稠密图）**：
  - 邻接矩阵 + 简单数组：$O(V^2)$
  - 邻接表 + 二叉堆：$O(Elog V)$
  - 邻接表 + 斐波那契堆：$O(Vlog V + E)$

- **Kruskal 算法（适合稀疏图）**
  - 并查集优化：$O(Elog V)$



### $KMP$

#### $前缀函数$

定义：给定一个长度为$n$的字符串$s$，其前缀函数被定义为一个长度为$n$的数组$\pi$。其中$\pi[i]$的定义是：

1. 如果子串$s[0…i]$有一对相等的真前缀与真后缀：$s[0…k-1]$和$s[i-(k-1)…i]$，那么$\pi[i]$就是这个相等的真前缀（或者真后缀，因为它们相等）的长度，也就是$\pi[i]=k$；
2. 如果不止有一对相等的，那么$\pi[i]$就是其中最长的那一对的长度；
3. 如果没有相等的，那么$\pi[i]=0$。

简单来说$\pi[i]$就是，子串$s[0…i]$最长的相等的真前缀与真后缀的长度。

用数学语言描述如下：
$$
\pi[i] = \max_{k=0..i} \{ k : s[0 \ldots k-1] = s[i-(k-1) \ldots i] \}
$$
特别地，规定$\pi[0]=0$。

#### $例子$

对于字符串 `abcabcd`

$\pi[0]=0$，因为 `a` 没有真前缀和真后缀，根据规定为 0

$\pi[1]=0$，因为 `ab` 无相等的真前缀和真后缀

$\pi[2]=0$，因为 `abc` 无相等的真前缀和真后缀

$\pi[3]=1$，因为 `abca` 只有一对相等的真前缀和真后缀：`a`，长度为 1

$\pi[4]=2$，因为 `abcab` 相等的真前缀和真后缀只有 `ab`，长度为 2

$\pi[5]=3$，因为 `abcabc` 相等的真前缀和真后缀只有 `abc`，长度为 3

$\pi[6]=0$，因为 `abcabcd` 无相等的真前缀和真后缀

同理可以计算字符串 `aabaaab` 的前缀函数为$[0,1,0,1,2,2,3]$。

#### $Next数组$

next数组用于存储模式字符串中每个位置之前（不包括此位置）的最大前缀长度，具体来说，next数组的含义如下：

- 对于模式字符串的每一个位置 $i$，$next$数组的值$ next[i]$ 表示模式字符串中从位置$0$到位置 $i$ 的子串的最长前缀，它同时也是该子串的后缀。即，$next$数组中的每一个值是指前缀的长度。

一种实操方法：$[-1]+$前缀数组$[:-1]$

例：$aabcaabbaa$的$next$数组为$[-1,0,1,0,0,1,2,3,0,1]$

#### $关于0开头还是-1开头$

$-1$开头与$0$开头的next数组本质是一样的。实际上，以$0$开头的$next$数组就是以$-1$开头的$next$数组每一项加$1$得到的。出现这种情况的原因在于模式串起始的索引值：在程序中，一个数组的索引的起始值为$0$；然而在考试和书中给的模式串起始值是多从$1$开始。



### $分治与DP$

#### $分治$

分治算法通常将原问题分解为几个规模较小但类似于原问题的子问题，求解这些子问题，然后再合并这些子问题的解来建立原问题的解。

注意：不必须要用递归。

#### $DP$

如果一个问题的最优解可以由其子问题的最优解有效地构造出来，那么称这个问题拥有**最优子结构(Optimal Substructure)**。最优子结构保证了动态规划中原问题的最优解可以由子问题的最优解推导而来。因此，一个问题必须拥有最优子结构，才能使用动态规划去解决。

分治和动态规划都是将问题分解为子问题，然后合并子问题的解得到原问题的解。但是不同的是，分治法分解出的子问题是不重叠的，因此分治法解决的问题不拥有重叠子问题，而动态规划解决的问题拥有**重叠子问题**。





## 例子们

### 最小生成树

```python
#最小生成树prim,输入用mat存编号为0~n-1的邻接表，表内元素为(x,d)x为下一个点d为权值，输出最小总权值
import heapq
def solve(mat):
    h=[(0,0)]
    n=len(mat)
    vis=[1 for i in range(n)]
    ans=0
    while h:
        (d,x)=heapq.heappop(h)
        if vis[x]:
            vis[x]=0
            ans+=d
            for (y,t) in mat[x]:
                if vis[y]:
	                heapq.heappush(h,(t,y))
    return ans
```

```python
#最小生成树kruskal,输入同上
import heapq
p=[i for i in range(n)]
def find(x):
    if p[x]==x:
        return x
    p[x]=find(p[x])
    return p[x]
def union(x,y):
    u,v=find(x),find(y)
    p[u]=v
def solve(mat):
    h=[]
    ans=0
    for i in range(n):
        for (j,d) in mat[i]:
            heapq.heappush(h,(d,i,j))
    while h:
        (d,i,j)=heapq.heappop(h)
        if find(i)!=find(j):
            union(i,j)
            ans+=d
	return ans
```



### 最短路径

```python
#dijkstra，输入同上,求出from和to之间的最短路径，需要保证输入无负权值，输出-1表示无法到达to
#若输入to则处理点对点问题，否则返回所有点的最短距离
import heapq
def solve(mat,f,to=-1):
    h=[(0,f)]
    n=len(mat)
    vis=[-1 for i in range(n)]
    while h:
        (d,x)=heapq.heappop(h)
        if x==to:
            return d
        if vis[x]==-1:
            vis[x]=d
	        for (y,s) in mat[x]:
    	        if vis[y]==-1:
                    heapq.heappush(h,(d+s,y))
    return vis
```



### 拓扑排序

```python
#输入为mat存邻接表，mat[i]为i指向的点的列表，输出-1表示有环，顺便做了输出字典序最小排序方式
import heapq
def solve(mat):
    n=len(mat)
    h=[]
    ru=[len(mat[i]) for i in range(n)]
    ans=[]
    for i in range(n):
        if ru[i]==0:
            heapq.heappush(h,i)
    while h:
        x=heapq.heappop(h)
        ans.append(x)
        for y in mat[x]:
            ru[y]-=1
            if ru[y]==0:
                heapq.heappush(h,y)
   	if len(ans)<n:
        return -1
    else:
        return ans
   	
```



### 判断无向图是否连通、有无回路

```python
#输入同上，基于并查集和图论
p=[i for i in range(n)]
e=[0 for i in range(n)]
v=[1 for i in range(n)]
def find(x):
    if p[x]==x:
        return x
    p[x]=find(p[x])
    return p[x]
def union(x,y):
    s,t=find(x),find(y)
    if s==t:
        e[t]+=1
        return
    p[s]=t
    v[t]+=v[s]
    e[t]+=e[s]+1
def connect(mat):
    for i in range(n):
        for j in mat[i]:
            union(i,j)
    root=find(0)
    if v[root]==n:
        return True
    return False
def loop(mat):
    for i in range(n):
        for j in mat[i]:
            union(i,j)
    for i in range(n):
        r=find(i)
        if e[r]>=v[r]:
            return True
    return False
```



### 单调栈

```python
#给定一个列表，输出每个元素之前小于它的最后一个元素的下标
def solve(lis):
    n=len(lis)
    stack=[]
    ans=[]
    for i in range(n):
        x=lis[i]
        while stack:
            (y,j)=stack[-1]
            if y>=x:
                stack.pop()
                continue
            break
        if not stack:
            stack.append((x,i))
            ans.append(-1)
        else:
            ans.append(stack[-1][1])
            stack.append((x,i))
    return ans
```

## 强连通图（Kosaraju/2 DFS）

```python
def dfs1(graph, node, visited, stack):
    visited[node] = True
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs1(graph, neighbor, visited, stack)
    stack.append(node)

def dfs2(graph, node, visited, component):
    visited[node] = True
    component.append(node)
    for neighbor in graph[node]:
        if not visited[neighbor]:
            dfs2(graph, neighbor, visited, component)

def kosaraju(graph):
   # Step 1: Perform first DFS to get finishing times
   stack = []
   visited = [False] * len(graph)
   for node in range(len(graph)):
       if not visited[node]:
           dfs1(graph, node, visited, stack)
   
    # Step 2: Transpose the graph
    transposed_graph = [[] for _ in range(len(graph))]
    for node in range(len(graph)):
        for neighbor in graph[node]:
            transposed_graph[neighbor].append(node)
    
    # Step 3: Perform second DFS on the transposed graph to find SCCs
    visited = [False] * len(graph)
    sccs = []
    while stack:
        node = stack.pop()
        if not visited[node]:
            scc = []
            dfs2(transposed_graph, node, visited, scc)
            sccs.append(scc)
    return sccs
```

# 

## 二、语法

### math库

向上取整：math.ceil()

向下取整：math.floor()

阶乘：math.factoria()

数学常数：math.pi（圆周率），math.e（自然对数的底）

math.sqrt(x), math.pow(x,y), math.exp(x), math.log(真数，底数)（默认为自然对数）

math.sin(),math.cos(),math.tan()

math.asin(),math.acos(),math.atan()

### heapq库：实现堆

heapq.heapify(list)

heapq.heappush(堆名，被插元素)  heapq.heappop(堆名)

插入元素的同时弹出顶部元素：heapq.heappushpop(堆名，被插元素)

  （或heapq.heapreplace(堆名，被插元素)）

·以上操作在最大堆中应换为“_X_max”（X是它们中的任意一个）

### itertools库：

整数集：itertools.count(x,y)（从x开始往大数的整数，间隔为y）

循环地复制一组变量：itertools.cycle(list)

所有排列：itertools.permutations(集合，选取个数)

所有组合：itertools.combinations

已排序列表去重：[i for i,_ in itertools.groupby(list)]（每种元素只能保留一个）

​      或者list(group)[:n]（group被定义为分组，保留每组的n个元素）

### collections库：

双端队列：

​	创建：a=deque(list)

​	从末尾添加元素：a.append(x)

​	从开头添加元素：a.appendleft(x)

​	从末尾删除元素：b=a.pop()

​	从开头删除元素：b=a.popleft()

有序字典：Ordereddict()

默认值字典：a=defaultdict(默认值)，如果键不在字典中，会自动添加值为默认值的键值对，而不报KeyError。

计数器：Counter(str)，返回以字符种类为键，出现个数为值的字典

### sys库：

sys.exit()用于及时退出程序

sys.setrecursionlimit()用于调整递归限制（递归层数过多会引起MLE）

### statistics库： 

1.mean(data)：计算数据的平均值（均值）。

2.harmonic_mean(data)：计算数据的调和平均数。

3.median(data)：计算数据的中位数。

4.median_low(data)：计算数据的低中位数。

5.median_high(data)：计算数据的高中位数。

6.median_grouped(data, interval=1)：计算分组数据的估计中位数。

7.mode(data)：计算数据的众数。

8.pstdev(data)：计算数据的总体标准差。

9.pvariance(data)：计算数据的总体方差。

10.stdev(data)：计算数据的样本标准差。

11.variance(data)：计算数据的样本方差。

### 数据处理：

二进制：bin()，八进制：oct()，十六进制：hex()

保留n位小数：round(原数字，保留位数)；’%.nf’%原数字；’{:.nf}’.format(原数字)；n位有效数字：’%.ng’%原数字；’{:.ng}’.format(原数字)

**ASCII转字符：chr();字符转ASCII：ord()**

**判断数据类型：isinstance(object,class)**

**try-except 某error**

1.`split()`使用时注意可能存在连续多个空格的情况

2.`RuntimeError`考虑使用`sys.setrecrusionlimit(layor)`避免爆栈

3.==不要默认最大值初始是0，有可能所有数据都小于零，最后输出0导致WA==

4.注意浮点数精度问题

5.候选人追踪$k=314159$等特殊情况==（边界情况）==

6.矩阵行数列数区分好

7.==多组数据不能使用exit()==

8.==不能对空列表进行某些操作，如`min`，`max`等==

9.考虑统一输出节省时间

10.多组测试数据中途`break`考虑忽略后续输入是否会引起下一组测试数据输入起点不对齐

11.注意输入数据可能的重复性

12.二分查找上下界设定要小心

13.第一行加`# pylint: skip-fle`可以忽略检查

14.标准答案一般不多于50行

### 快速读写

```python
import sys
input = lambda: sys.stdin.readline().strip()
write = lambda x: sys.stdout.write(str(x))
```

### 位运算

![image-20240604203335872](https://raw.githubusercontent.com/xjsongphy/repository_for_typora/main/img/202406042033958.png)

#### 与运算的用途

##### 清零

如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。

##### 取一个数的指定位

比如取数 `X=1010 1110` 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即`Y=0000 1111`，然后将X与Y进行按位与运算`X&Y=0000 1110`即可得到X的指定位。

##### 判断奇偶

只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用`if ((a & 1) == 0)`来判断a是不是偶数。

### 小技巧

1.进制转换：2进制`bin()`输出0b...，八进制`oct()`输出0o...，十六进制`hex()`输出0x...，`int(str,base)`可以把字符串按照指定进制转为十进制默认base=10

2.format：

```python
print('{:.2f}'.format(num))
```

3.字符串匹配等

```python
iterable.count(value)
str.find(sub)		#未找到抛出-1
list.index(x)		#未找到抛出ValueError
```

4.使用`try`+`except`判断错误类型，辅助处理RE问题

5.math库

```python
math.pow(x, y) == x**y
math.factorial(n) == n!
```

6.`ord()`把字符变为ASCII，`chr()`把ASCII变为字符

7.`calendar.isleap(year)`返回T/F判断闰年

8.`for a1, a2, ..., am in zip(b1, b2, ..., bn)`旋转矩阵

9.排列组合

```python
from itertools import permutations,combinations
permutations(list)			#生成list的全排列（每个以元组形式存在）
combinations(list,k)		#生成list的k元组合（无序）（每个以元组形式存在）
```

10.`replace()`替换字符串中的指定字符，`eval()`函数计算表达式的值

11.`print(*r)`快速输出空格连接的列表/元组等

12.取整函数：`ceil`向上取整（math库）,`floor`向下取整（math库）,`round(num, n)`四舍五入, 小数点后最终有n位

13.`enumerate`快速获取索引和值：`for index, value in enumerate(list, start)`

14.补齐位数：`str.ljust(width, string)`右侧补充`string`至`str`长度为`width`，`str.rjust(width, string)`左侧补充`string`至`str`长度为`width`

## 三、令人印象深刻的题目

### 02299: Ultra-QuickSort

http://cs101.openjudge.cn/practice/02299/



思路：

用归并排序计算逆序数

代码

```python
# 
def solve(lis):
    if len(lis)==1:
        #print(lis)
        return (lis,0)
    k=len(lis)//2
    l=len(lis)-k
    le=lis[:k]
    ri=lis[k:]
    u=solve(le)
    v=solve(ri)
    p=u[0];q=v[0]
    i=0;j=0
    ans=0
    num=[]
    while i<k or j<l:
        if j<l:
            if i<k and p[i]<=q[j]:
                num.append(p[i])
                ans+=j
                i+=1
            else:
                num.append(q[j])
                j+=1
        else:
            ans+=j
            num.append(p[i])
            i+=1
    #print(num)
    return (num,u[1]+v[1]+ans)
while True:
    n=int(input())
    if n==0:
        break
    lis=[]
    d=0
    for _ in range(n):
        temp=int(input())
        lis.append(temp)
    print(solve(lis)[1])
```

### 24591: 中序表达式转后序表达式

http://cs101.openjudge.cn/practice/24591/



思路：

先处理输入，然后依次遍历输入列表，如果是数，直接输出；如果是左括号，先入栈；如果是运算符，就把此前能确定先运算的运算符出栈输出，即输出所有比目前元素高级的运算符直到上一个括号或栈底；如果是右括号，就输出至上一个左括号

代码

```python
# 
n=int(input())
for _ in range(n):
    s=input()
    lis=[];temp=''
    for x in s:
        if x in '+-*/()':
            if temp!='':
                lis.append(temp)
                temp=''
            lis.append(x)
        else:
            temp+=x
    if temp!='':
        lis.append(temp)
    os=[]
    for x in lis:
        if x=='(':
            os.append(x)
        if x not in '+-*/()':
            print(x,end=' ')
        if x in '+-*/':
            if os:
                y=os[-1]
                if x in '+-':
                    while os and os[-1] not in '()':
                        y=os.pop()
                        print(y,end=' ')
                else:
                    while os and os[-1] not in '+-()':
                        y=os.pop()
                        print(y,end=' ')
            os.append(x)
        if x==')':
            y=os.pop()
            while y!='(':
                print(y,end=' ')
                y=os.pop()
    while os:
        print(os.pop(),end=' ')
    print()
```

### 晴问9.5: 平衡二叉树的建立

https://sunnywhy.com/sfbj/9/5/359



思路：

照猫画虎，好难

代码

```python
# 
class node:
    def __init__(self,key):
        self.key=key
        self.p=None
        self.l=None
        self.r=None
        self.h=0
def hi(x):
    if x==None:
        return -1
    else:
        return x.h
def lr(rt):
    global root
    x=rt.r;y=x.l;z=rt.p
    x.p=z
    if z:
        if rt==z.l:
            z.l=x
        else:
            z.r=x
    rt.p=x
    x.l=rt
    rt.r=y
    if y:
        y.p=rt
    rt.h=1+max(hi(rt.l),hi(rt.r))
    x.h=1+max(hi(x.l),hi(x.r))
    if z:
        z.h=1+max(hi(z.l),hi(z.r))
    y=rt
    while y.p:
        y=y.p
    root=y
def rr(rt):
    global root
    x=rt.l;y=x.r;z=rt.p
    x.p=z
    if z:
        if rt==z.l:
            z.l=x
        else:
            z.r=x
    rt.p=x
    x.r=rt
    rt.l=y
    if y:
        y.p=rt
    rt.h=1+max(hi(rt.l),hi(rt.r))
    x.h=1+max(hi(x.l),hi(x.r))
    if z:
        z.h=1+max(hi(z.l),hi(z.r))
    y=rt
    while y.p:
        y=y.p
    root=y
n=int(input())
lis=list(map(int,input().split()))
root=node(lis[0])
for i in lis[1:]:
    x=node(i)
    y=root;z=root
    while y:
        z=y
        if y.key<=i:
            y=y.r
        else:
            y=y.l
    if z.key<=i:
        z.r=x
    else:
        z.l=x
    x.p=z
    t=x
    while t:
        t.h=1+max(hi(t.l),hi(t.r))
        t=t.p
    t=x
    while True:
        if not t:
            break
        t.h=1+max(hi(t.l),hi(t.r))
        if abs(hi(t.l)-hi(t.r))<=1:
            t=t.p
        else:
            if hi(t.l)>hi(t.r):
                x=t.l
                y=x.l;z=x.r
                if hi(y)<hi(z):
                    lr(x)
                rr(t)
            else:
                x=t.r
                y=x.r;z=x.l
                if hi(y)<hi(z):
                    rr(x)
                lr(t)
            t=t.p
ans=[]
def solve(rt):
    if not rt:
        return
    ans.append(rt.key)
    solve(rt.l)
    solve(rt.r)
solve(root)
print(' '.join(map(str,ans)))
```

### 04089: 电话号码

trie, http://cs101.openjudge.cn/practice/04089/

Trie 数据结构可能需要自学下。



思路：

用字典嵌套表示trie在其中进行插入和查询即可

代码

```python
# 
for ____ in range(int(input())):
    trie={}
    n=int(input())
    lis=[]
    for _ in range(n):
        lis.append(input())
    lis.sort(key=len,reverse=True)
    flag=1
    for w in lis:
        temp=trie;l=len(w);f=1
        for x in w:
            if x in temp:
                temp=temp[x]
            else:
                f=0
                temp[x]={}
                temp=temp[x]
        if f:
            flag=0
    if flag:
        print("YES")
    else:
        print("NO")
```

### 03441: 4 Values whose Sum is 0

data structure/binary search, http://cs101.openjudge.cn/practice/03441



思路：

用一个字典存储AB相加后每个和的个数，再对CD遍历计算

代码

```python
# 
A=[];B=[];C=[];D=[]
n=int(input())
for _ in range(n):
    a,b,c,d=map(int,input().split())
    A.append(a);B.append(b);C.append(c);D.append(d)
dic={}
for i in range(n):
    for j in range(n):
        x=A[i]+B[j]
        if x in dic:
            dic[x]+=1
        else:
            dic[x]=1
ans=0
for i in range(n):
    for j in range(n):
        x=-(C[i]+D[j])
        if x in dic:
            ans+=dic[x]
print(ans)
```



### 22067: 快速堆猪

http://cs101.openjudge.cn/practice/22067/



思路：

用两个栈分别存猪和这个猪进去之后的最小值

代码

```python
# 
pigstack=[]
minstack=[]
mi=-1
while True:
    try:
        s=input().split()
        if s[0]=='push':
            n=int(s[1])
            pigstack.append(n)
            if mi==-1:
                minstack.append(n)
                mi=n
            elif mi>=n:
                minstack.append(n)
                mi=n
        if s[0]=='pop':
            if not pigstack:
                continue
            temp=pigstack.pop()
            if temp==mi:
                minstack.pop()
                if minstack:
                    mi=minstack[-1]
                else:
                    mi=-1
        if s[0]=='min':
            if mi>=0:
                print(mi)
    except EOFError:
        break
```



### 27947: 动态中位数

http://cs101.openjudge.cn/practice/27947/



思路：

用两个栈维护左半边与右半边

代码

```python
# 
import heapq

for _____ in range(int(input())):
    lis=list(map(int,input().split()))
    n=len(lis)
    if True:
        print((n+1)//2)
        h1=[-lis[0]];h2=[lis[0]]
        print(h2[0],end=' ')
        for i in range(1,1+(n-1)//2):
            x,y=lis[2*i-1],lis[2*i]
            if x>y:
                x,y=y,x
            mid=h2[0]
            if x<=mid and y>=mid:
                heapq.heappush(h1,-x)
                heapq.heappush(h2,y)
            if x>mid:
                heapq.heappop(h2)
                heapq.heappush(h2,x)
                heapq.heappush(h2,y)
                heapq.heappush(h1,-h2[0])
                mid=h2[0]
            if y<mid:
                heapq.heappop(h1)
                heapq.heappush(h1,-x)
                heapq.heappush(h1,-y)
                heapq.heappush(h2,-h1[0])
                mid=h2[0]
            print(mid,end=' ')
        print()
```



### 04135: 月度开销

http://cs101.openjudge.cn/practice/04135/



思路：

注意到题目数据数据总和上界不大，采用对目标值二分查找

代码

```python
# 
def check(lis,k,m):
    c=0;i=0;temp=0
    for x in lis:
        if x>k:
            return False
        if temp+x<=k:
            temp+=x
        else:
            c+=1
            temp=x
        if c>=m:
            return False
    return True
n,m=map(int,input().split())
lis=[int(input()) for i in range(n)]
l=sum(lis)//m+1;r=sum(lis)
while l<r:
    k=(l+r)//2
    if check(lis,k,m):
        r=k
    else:
        l=k+1
print(r)
```



### 01182: 食物链

http://cs101.openjudge.cn/practice/01182/



思路：

把一个点、该点所吃的、被该点吃的共3n个点做成并查集

代码

```python
# 

def find(x):
    if p[x]==x:
        return x
    p[x]=find(p[x])
    return p[x]
def union(x,y):
    u,v=find(x),find(y)
    p[u]=v
n,k=map(int,input().split())
p=[i for i in range(3*n+1)]
ans=0
for _ in range(k):
    d,x,y=map(int,input().split())
    if x>n or y>n:
        ans+=1
        continue
    if d==1:
        if find(x)==find(y+n) or find(x+n)==find(y):
            ans+=1
            continue
        union(x,y)
        union(x+n,y+n)
        union(x+2*n,y+2*n)
    if d==2:
        if find(x)==find(y) or find(x)==find(y+n):
            ans+=1
            continue
        union(x+n,y)
        union(x,y+2*n)
        union(x+2*n,y+n)
print(ans)
```



### 28046: 词梯

bfs, http://cs101.openjudge.cn/practice/28046/



思路：

先利用字典存每种可能的词桶，便于建图，bfs

代码

```python
# 
class word:
    def __init__(self,k):
        self.k=k
        self.n=[]
n=int(input())
dic1={};dic2={};dic={}
for ___ in range(n):
    w=input()
    for i in range(0,4):
        ww=w[:i]+'_'+w[i+1:]
        if w not in dic1:
            dic1[w]=[ww]
        else:
            dic1[w].append(ww)
        if ww not in dic2:
            dic2[ww]=[w]
        else:
            dic2[ww].append(w)
for w in dic1:
    dic[w]=word(w)
for w in dic1:
    x=dic[w]
    for ww in dic1[w]:
        for v in dic2[ww]:
            if v!=w:
                x.n.append(dic[v])
    #print(list(map(lambda x:x.k,dic[w].n)))
from collections import deque
f,t=map(lambda x:dic[x],input().split())
q=deque([f]);p={f:None}
while q:
    x=q.popleft()
    for y in x.n:
        if y not in p:
            q.append(y)
            p[y]=x
if t not in p:
    print("NO")
else:
    ans=[]
    while t:
        ans.append(t.k)
        t=p[t]
    print(" ".join(reversed(ans)))
```

### 28050: 骑士周游

dfs, http://cs101.openjudge.cn/practice/28050/



思路：

神奇的优化：dfs的时候走下一步可行路径最少的，这样可以避免一头扎进节点海里出不来

代码

```python
# 
n=int(input())
x,y=map(int,input().split())
vis=[[0 for i in range(n)] for j in range(n)]
vis[x][y]=1
def check(x,y,n):
    if x<0 or x>n-1 or y<0 or y>n-1:
        return False
    return True
def nei(i,j):
    ans=0
    for k in range(8):
        ii=i+dx[k];jj=j+dy[k]
        if check(ii,jj,n) and vis[ii][jj]==0:
            ans+=1
    return ans
dx=[-2,-1,1,2,2,1,-1,-2]
dy=[1,2,2,1,-1,-2,-2,-1]
def dfs(x,y,n,c):
    if c==n*n:
        return 1
    vis[x][y]=1
    lis=[(x+dx[i],y+dy[i]) for i in range(8)]
    lis.sort(key=lambda x:nei(x[0],x[1]))
    for (xx,yy) in lis:
        if check(xx,yy,n) and vis[xx][yy]==0:
            if dfs(xx,yy,n,c+1):
                return True
    vis[x][y]=0
    return False
if dfs(x,y,n,1):
    print("success")
else:
    print("fail")
```
Sort algorithm:
1.十大经典排序算法及动图演示 - 知乎
排序：是计算机程序设计中的一种重要操作，其功能是对一个数据元素集合或序列重新排列成一个按数据元素某个值有序的序列。

选择排序、堆排序和归并排序是最好和最坏复杂度相同的。
空间归并最大，但是：

2.（1）quicksort双指针

①最好情况： 
时间复杂度为：O(nlogn)：即每次划分产生的两个区间大小都为区间总长（设为n）的一半； 
空间复杂度：o（lgn），也是一般情况（上面标错了）
 ②最坏情况： 时间复杂度为：O(n^2) ，即每次划分产生的两个区间大小分别包含n-1个元素和1个元素； 
空间复杂度为：O(n) 
注：快排使用的空间为：O（1），真正消耗空间的是递归调用。 
（2）mergesort从len=1的子表开始合并，递归先左后右
（3）冒泡排序、选择排序 每次提取最大的到右边，冒泡是不断比较冒上来（同时交换），选择是直接找到最大的
（4）Shellsort：注意gapsize=前后2个元素索引差值，不是纯间隔的长度
（5）堆排序是选择排序，堆是完全二叉树，堆排序最适用于partial-sort.

堆排序：
基本步骤：
1.首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端

2.将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1

3.将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组

在数据结构中，从逻辑上可以把数据结构分成线性结构和非线性结构。
数据的基本单位是数据元素，数据的最小单位是数据项。
数据对象：是性质相同的数据元素的集合，是数据的子集
数据结构是数据对象，以及存在于该对象的实例合组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数来给出。


存储结构：
存储结构描述了数据在计算机内部的实际存储方式。它主要关注数据在计算机内存中的组织形式，以及如何在内存中存储和访问数据。存储结构通常包括以下几种：
顺序存储结构：数据元素在内存中按照一定的顺序依次存储，相邻的元素在内存中也是相邻的，如顺序表、数组，可以随机存取。
链式存储结构：数据元素通过指针相互连接，每个元素在内存中可以不连续存储，如链表。
链接存储的存储结构所占存储空间分两部分，一部分存放结点值，另一部分存放表示结点间关系的指针,单链表数据密度<1
索引存储结构：除了数据元素本身外，还维护一个索引表，索引表中的每个元素指向相应数据元素的位置。
散列存储结构：通过散列函数将数据元素直接映射到内存地址，实现快速的查找。
存储结构与具体的数据结构有关，不同的数据结构可以选择不同的存储结构来实现。例如，数组通常使用顺序存储结构，链表则使用链式存储结构。

逻辑结构：描述了数据元素之间的逻辑关系，以及对这些关系的操作。它不涉及具体的存储细节，而是关注数据元素之间的关联和组织方式。通常要求同一逻辑结构中的所有数据元素具有相同的特性，这意味着不仅数据元素所包含的数据项的个数要相同，而且对应数据项的类型要一致 

逻辑结构通常包括以下几种：
线性结构：数据元素之间存在一对一的关系，可以通过一维的方式排列，例如线性表、栈、队列等。
树形结构：数据元素之间存在一对多的关系，可以用树形方式组织，例如二叉树、堆、哈夫曼树等。
图形结构：数据元素之间存在多对多的关系，例如图、网等。
有序表也属于逻辑结构

逻辑结构与数据的抽象关系更为密切，它们描述了数据元素之间的逻辑联系和操作规则，而不关注数据元素的存储方式。例如，队列的逻辑结构就是先进先出（FIFO）的关系，而队列的存储方式可以是数组或链表。

单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。
线性表中的元素属于相同的数据类型，即每个元素所占的空间必须相同。



有向图的邻接矩阵、邻接表和逆邻接表_逆邻接表：
在邻接表中，对图中每个顶点建立一个单链表（区分邻接表和邻接矩阵，邻接矩阵是n**2的）

散列表：
散列函数和散列地址：在记录的存储位置p和其关键字key之间建立一个确定的对应关系H，使得p=H(key)，称这个对应关系H为散列函数，p为散列地址
散列表：一个有限连续的地址空间，用以存储按散列函数计算得到相应散列地址的数据记录。通常散列表的存储空间是一个一维数组，散列地址是数组的下标。
冲突和同义词：对不同的关键字可能得到同一散列地址，即key1 != key2，但是H(key1) == H(key2)，这种现象称为冲突。具有相同函数值的关键字对该散列表函数来说称为同义词，key1与key2互称为同义词。
eg：A称为关键字key，则A经过关系H后，在数组中的位置称为存储位置p；而不同的关键字8，4，经过关系（关键字%2）得到的存储地址都是0，称为冲突，而8，4则为同义词
1.开放地址法
开放地址法的基本思想是：把记录都存储在散列表数组中，当某一记录关键字 key 的初始散列地址 H0 = H(key)发生冲突时，以 H0 为基础，采取合适方法计算得到另一个地址 H1，如果 H1 仍然发生冲突，以 为基础再求下一个地址 H2，若 H2 仍然冲突，再求得 H3。依次类推，直至 Hk 不发生冲突为止，则 Hk 为该记录在表中的散列地址。
这种方法在寻找 ”下一个” 空的散列地址时，原来的数组空间对所有的元素都是开放的所以称为开放地址法。通常把寻找 “下一个” 空位的过程称为探测，上述方法可用如下公式表示：
H{i}=(H(key) +d{i})%m ， i=1,2,…,k(k≤m-l) 
其中，H(key)为散列函数，m 为散列表表长，d为增量序列。根据d取值的不同，可以分为以下3种探测方法。
(1) 线性探测法 ：
使用线性探测法处理散列表碰撞问题，若表中仍有空槽（空单元），插入操作一定成功(T)这种探测方法可以将散列表假想成一个循环表，发生冲突时，从冲突地址的下一单元顺序寻找空单元，如果到最后一个位置也没找到空单元，则回到表头开始继续查找，直到找到一个空位，就把此元素放入此空位中。如果找不到空位，则说明散列表已满，需要进行溢出处理。

可以看出，上述三种处理方法各有优缺点。线性探测法的优点是：只要散列表未填满，总能找到一个不发生冲突的地址。缺点是：会产生“二次聚集”现象。而二次探测法和伪随机探测法的优点是：可以避免“二次聚集”现象。缺点也很显然：不能保证一定找到不发生冲突的地址。（二次聚集：指在处理冲突过程中发生的两个第一个哈希地址不同的记录争夺同一个后继哈希地址的现象。）

链地址法(拉链法，开散列)：每个同义词建立一个链表




有 n（n>=2）个顶点的有向强连通图最少有 _ _ _ _ _ 条边。n
循环队列：https://zhuanlan.zhihu.com/p/663842362?utm_id=0






1.一个递归算法必须包括终止条件和递归部分
2.回溯算法的核心思想是:从根结点出发,沿着某条路径向前搜索,当搜索到某一结点发现不满足要求时,就返回(回溯)到上一结点,继续尝试其他路径。回溯算法不需要使用队列来保存路径,而是通过递归调用、返回上一层等方式来实现状态的保存和恢复。
3.串是一种特殊的线性表，其特殊性体现在数据元素是一个字符,串是字符的有限序列,模式匹配是串的一种重要运算,串既可以采用顺序存储，也可以采用链式存储   
3.
4.
5.prim适合稠密图，kruskal不能有负权边
树可以等价转化二叉树，树的先序遍历序列与其相应的二叉树的前序遍历序列相同
二叉树：
高度=层数-1，无向图节点度数=相连边数
度的定义：节点所拥有的子树的数目称为该节点的度
注意： 叶子节点的度为0
其中n0=n2+1
森林到二叉树的转换：森林是一组不相交的树。将森林转换为二叉树的方法通常称为“孩子-兄弟表示法”：每个节点的第一个孩子作为该节点的左孩子。每个节点的兄弟作为该节点的右孩子。二叉树中右指针域为空的节点，我们需要确定在这种转换中，二叉树中右指针域为空的节点的数量。
分析过程
非终端结点的定义：非终端节点是指在原始森林中有孩子的节点。
转换后的二叉树：在二叉树中，只有那些没有右孩子的节点，其右指针域为空。
如果一个节点没有兄弟节点，那么在二叉树中这个节点的右指针域为空。
在孩子-兄弟表示法中，以下几类节点会导致右指针为空：
每棵树的根节点（因为它们没有兄弟）。每个非终端节点的最右侧的孩子（因为它们没有右兄弟）。右指针为空的节点数量。每棵树的根节点的右指针域为空。每个非终端节点的最后一个孩子的右指针域为空。考虑所有叶子节点，这些节点也没有右孩子。
由于根节点的右指针域为空，而森林的根节点数就是树的数量，每个树至少有一个根节点。如果我们设 n 是非终端节点的数量，那么根节点（第一层）的数量加上叶子节点的数量会影响右指针为空的节点总数。
关键点
对于森林转换成的二叉树：
如果 F 中有 n 个非终端节点，每个非终端节点的每个最后一个孩子节点的右指针域为空。
每棵树的根节点的右指针域为空，这些根节点数通常为 n+1（根节点数 = 非终端节点数 + 1）
因此，二叉树中右指针域为空的节点数为 n+1
结论
如果 F 中有 n个非终端结点，则由 F变换得的二叉树 B中右指针域为空的节点数为：
n+1




DFS和BFS树：BFS遍历树和DFS遍历树_bfs树和dfs树-CSDN博客
https://blog.csdn.net/z13192905903/article/details/103306846

图！：
如果各边权值各不相同，存在唯一最小生成树
对任意一个连通的无向图，如果存在一个环，且这个环中的一条边的权值大于该环中
任意一个其它的边的权值，那么这条边一定不会是该无向图的最小生成树中的边。

拓扑排序只适用于DAG有向无环图



Kmp:
Next:
void Getnext(int next[],String t)
{
   int j=0,k=-1;
   next[0]=-1;
   while(j<t.length-1)
   {
      if(k == -1 || t[j] == t[k])
      {
         j++;k++;
         if(t[j]==t[k])//当两个字符相同时，就跳过
            next[j] = next[k];
         else
            next[j] = k;
      }
      else k = next[k];
   }
}

将栈顶第1个元素记为top1，栈顶的第2的元素记为top2，
注意：计算方式为 top2 运算符 top1 = 值